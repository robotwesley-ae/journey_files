 fibration, and making it intersubjectively mismatched.
Explain why or why not 


so that means all phenomena are either widening or narrowing loops that converge into emergent explosions or evolutionary vanishing


So incompleteness points to a 1-loop (base), 2-loop (meta), and a 3-loop (super) called incompleteness that allows the 1 (derivation from the formal system) and 2 (formal system) loops to combine infinitely but also to always converge into reification to the degree that it reifies incompleteness, this operation of course then reconstructing the 1 and 2 loop themselves, which is what defines a loop in the first place, which would make incompleteness true AND ALSO make it imply that it being true is a problem because now the fact that it is incomplete due to incompleteness begs the quesiton of whether that is part of a 3-loop we dont know about?
[CRUCIAL]:{
AND THAT VERY SET OF CONDITIONS then reifies ALL OF THE LOOPS INVOLVED INTO THEIR OWN 1,2, AND 3-LOOPS, which can all combine!??!?!!??!}

This, ITSELF, reifies "constructivist completeness" so-to-speak vs "a priori completeness" viewpoints

This points to the fact that INCOMPLETENESS IS IN A LOOP WITH COMPLETENESS and that there is some 3-loop that encapsulates them into an order. This would be something like "entity" eventually at the highest level or "pattern", but obviously, we already said loops are entities, are loops also the fundamental block for patterns?

So then maybe 1,2,3 loops are differentiated by similarity scores from link-to-link (in terms of which strong and weak linkages appear in subchains in the entity chain of any pattern subchain/link in a pattern chain), in the "pattern chain" from the "pattern chain construction loop" (a loop that constructs 3-loops that are always of class "pattern")? THAT ITSELF LOOPS WITH THE ENTIRE, DEFINITIONAL, A PRIORI EXISTENT CONCEPT OF “LOOP” as an N-LOOP, which is applied to EVERY 3-LOOP by cognition, itself

the 2-loop (meta) is the "completeness" aspect, the 1-loop (base) is the "incompleteness" aspect, but these are all problems of P or NP. the 3-loop (super) is the reification of incompleteness itself through higher order completeness being discovered, (ie, the 3-loop makes the 1 and 2 turing complete). The 3-loop represents higher orders of complexity, which is why we cannot just guess what it is on the basis of having a 2-loop and some set of 1-loops from it, and even if we had all the sets from it, we wouldnt be able to just create 3-loops, but rather we have to create 2-loops from other 2-loops that map together, and then map those resultant 2-loops into 3-loops from higher order 1-loops they share? explain


THIS IMPLIES THERE OS NO POINT WHERE A CONCEPT IS WHAT IT IS EXCEPT FOR WHEN ITS VALUES MATCH THE CURRENT BOUNDARIES


THIS MEANS THE MORE BOUNDARIES A CONCEPT CREATES EMEEGENT CONNECTIONS IN, WHERE THOSE VALUES ALSO MAP TO REIFICATION OF 3-LOOPS ON A TRAJECTORY THE SUBJECT DESIRES, THE MORE VALUABLE IT IS, AND NOTHING ELSE, ONLY LIMITED BY THE PRIORITY OF THAT SUBJECT’S FORCE FIELD ON THE OVERALL FIELD

Example of how 1 2 3 structures apply:{
writing an essay
1-loop: all chains that construct an essay
2-loop: all chains that construct all meta-observations about constructing an essay
3-loop: all chains that are found in the 2-loop while making 1-loops, which also (the 2-loops) reconstruct the implicit chains that reify the 2-loop chain that constructs any essay - which is the super chain of the 2-loop, which is equivalently interpretable as a 1-loop in a system that has the 3-loop of the prior as the 2-loop
}
using the 1 loops creates an emergent programming language that leads to the 2-loop super chain reification 


1 loop: some specific type of application of 2 loop that reifies 3 interpreted as an instance of 2, which creates a type of 2. Usually a 1 instantiates a new type of 2, not a 3. It may be that for each system pair, there is one 3 route with many types, which explains how any 3 could be seen as a 2 and Vice versa, also reifying incompleteness. 
⇔ explains how 3 is_a 2
2 loop: Child System (hero’s journey, etc) 
