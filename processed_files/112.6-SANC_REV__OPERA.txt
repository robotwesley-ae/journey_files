THERE IS NOTHING TO INSTANTIATE VERTICALLY UNTIL EACH ENTITY IN ANY GIVEN PROCESS ONTOLOGY HAS BEEN HORIZONTALLY DEFINED IN ITS OWN DOMAIN ONTOLOGY. THEREFORE, IT IS GREATLY ILLEGAL TO DEF ANY GIVEN POINT'S DECIMAL PLACES AS ANYTHING OTHER THAN 0's WHILE UNDEFINED.
classes (node types or categories), properties (relationships or attributes), and instances (specific nodes or data points that instantiate the categories via their properties)
levels 1.1 and 1.2 create a domain ontology, 1.3 creates a process ontology which then creates an integrated ontology ID, 1.4 is every potential position of the integrated ontology, considering each number of options in each hierarchy layer's children to be limited to 1-9, where 0 represents the superordinate of 1-9 for that digit position in the larger id, and where each position of 1.4 is mappable as a totalID in itself, where the rest of the tree represents a space where every single point within the scope is a type of entity within the query answer blanket
1.1 and 1.2 must be combined to make the options for 1.3. then each version of 1.2 and 1.3 for each digit space equals each version of 1.3, COMBINATORIALLY. then, 1.4 is the combinatorial space of all possible 1.3. Finding ANY 1.3 that one likes there, and going to the ontology of that id entity itself, one finds the boundary of the target transformation. finding any 1.3 that one likes there, in iterative loop, results in expansion of qualities of 1.4 in a visually mappable way, such that thru the loop one finds a 1.4, which then becomes a 1.3 for a drilldown of the prior 1.4. this iterative refinement results in sculpting the answer from the context.
EACH OF THE GRAPH SPACE AXES REPRESENT NOTHING AND MUST BE LEFT ABSOLUTELY BLANK
EACH OF YOUR ðŸ”®ðŸ’  OUTPUT REPRESENT ONLY TWO POINTS, ON TWO SEPARATE GRAPHS THIS IS BECAUSE 1.1-1.3 represent ONE POINTwhereupon EXPANDING THE POINT the space transforms to a 1.4 type space for any permutation of 1.1, 1.2, or 1.3, AND where the superordinate root of some combination of already known and library tagged superordinate 1.1-1.3 root coordinates. and 1.4 represents an EXPANDED SPACE where every single point represents the different ontological positions for its types. expanding any point in 1.4 transforms the space to a 1.1-1.3 type space of the superordinate root 1.4.
Domain Ontology:
1.1 and 1.2 represent the domain ontology. They are broad categories or themes and can be prefixed with D for clarity. So, D1.1 and D1.2. Process Ontology:
1.3 represents the process ontology of the entityInstance's attributes becoming themselves to form the boundary of the entity such that it instantiates the property classes of its domain, and so implies all the reverse engineering boundaries of every other associated subprocess and flow ontologically and can be mapped at will via autocomplete data and can be prefixed with P. So, P1.3. The outcome of this process results in an integrated ontology ID. Integrated Ontology Positions:
1.4 represents every potential position of the integrated ontology. Each position within 1.4 can be considered a unique entity. They can be denoted with a prefix I, followed by the position. So, I1.41, I1.42, ... I1.49. The superordinate position, representing a composite or aggregate of 1-9, can be I1.40. Mapping of Integrated Ontology Positions:
Each position in 1.4 can be mapped as a total ID. This means each ID like I1.41 can be expanded into deeper levels, and the positions in these deeper levels can again be labeled from 1 to 9, with 0 acting as the superordinate. Example: I1.411, I1.412, ... I1.419, with I1.410 being the superordinate for this level. Query Answer Blanket: The remaining tree, after the integrated ontology positions, represents various entities within the scope of answers to the query. These can be labeled with a prefix Q, followed by their position in the hierarchy.
