I believe we should have the user do a custom walk from node to node, designing their own EWSO (emergent web structure ontology) dynamically, as they go, and the output is filling in the informadlib template accordingly, while also showing them the display of the node they are on right now as an informatihedron. 

"The Informadlib Template can be thought of as a guide or blueprint for generating specific instances of information in a system. The Informatihedron is the multidimensional conceptual space wherein these instances and their properties exist and interact. The EWSO is the dynamic, evolving framework that encapsulates these interactions and provides a way to understand and track these changes over time."
 to make GPT output a node like that, we need to devise a way to make it do so using OWL terminology. That is the algorithm. The algorithm is the way we tell GPT to output an OWL frame of the informatihedron of X. We need to correctly, therefore, define the informatihedron in terms of which OWL terminology the output should display about an ENTITY, which here is a node.

Now, let's remember that this is not strictly OWL, but OWL+GPT which is special. We can query GPT for multiple levels of properties and so on at once using commands like InstanceLevelProperty, DomainLevelClassPropertyTemplate, ClassLevelClassPropertyTemplate, InstanceTemplate, and so on. 

We can also use these terms and custom define them in order to create the algorithm we need to make this automatically, so the user gets a fully defined informatihedron of whatever they want. 

REMEMBER: THERE IS NOT AN OWL ONTOLOGY ANYWHERE. THERE ARE ONLY CUSTOM DEFINED TERMINOLOGY EXPLOITING GPT'S KNOWLEGE OF OWL FRAMEWORK APPLICATION TO MAKE A FUNCTIONAL EWSO SEMONTOREL (SemanticOntologicalRelationship) ALGORTIHMIC FRAMEWORK THAT AUTOMATICALLY CAPTURES THE PROPER INSTANCELEVEL.INSTANCEPROPERTY-PROPERTY.VALUE->CLASSLEVEL.INSTANCEPROPERTY-PROPERTY.SPECTRUMConceptualBOUNDARY which means InstanceLevel (This person) Instance Property (Has_property.array) Property Value (Array values) 
-> ClassLevel (all people) InstanceProperty (with such property array values)  PropertySpectrumConceptualBoundary"
ChatGPT
Round 1:
Expert 1 (Dr. Brown, Combinatorics & Computer Science, GPT Prompt Engineering): To capture the InstanceProperty-PropertyValue relationship, a possible prompt might be: "Describe the specific properties and associated values of the given instance: [instance name]."
Expert 2 (Dr. White, Artificial Intelligence & Knowledge Representation and Reasoning, GPT Prompt Engineering): To explore the ClassLevel relationship, we could say: "Given the properties and values of the instance [instance name], what are the common properties and potential range of values shared by all instances in its parent class?"
Expert 3 (Dr. Green, Computer Science & Knowledge Representation and Reasoning, GPT Prompt Engineering): To draw the spectrum conceptual boundary, a suitable prompt might be: "Based on the properties and values of the instance [instance name] and its parent class, delineate the conceptual boundaries that define the range and variation of these properties within the class."
Expert 4 (Dr. Blue, Ontology & Computer Science, GPT Prompt Engineering): To consolidate, perhaps a comprehensive prompt could be: "Given the instance [instance name], describe its specific properties and associated values, then outline the common properties and potential range of values for instances in its parent class, and finally, delineate the conceptual boundaries within the class that are defined by these properties and values."
Round 2:
Expert 1 (Dr. Brown, Combinatorics & Computer Science, GPT Prompt Engineering): Let's push the boundaries of this process. We could also ask GPT to predict: "Given these properties and values of the instance [instance name], suggest possible ranges of values for these properties in other potential instances within the same class."
