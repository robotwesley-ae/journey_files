

>>> prompt = "My favourite condiment is"

>>> model_inputs = tokenizer([prompt], return_tensors="pt").to(device)
>>> model.to(device)

>>> generated_ids = model.generate(**model_inputs, max_new_tokens=100, do_sample=True)
>>> tokenizer.batch_decode(generated_ids)[0]
"The expected output"

Expected speedups
Below is a expected speedup diagram that compares pure inference time between the native implementation in transformers using mistralai/Mixtral-8x7B-v0.1 checkpoint and the Flash Attention 2 version of the model.



Sliding window Attention
The current implementation supports the sliding window attention mechanism and memory efficient cache management. To enable sliding window attention, just make sure to have a flash-attn version that is compatible with sliding window attention (>=2.3.0).
The Flash Attention-2 model uses also a more memory efficient cache slicing mechanism - as recommended per the official implementation of Mistral model that use rolling cache mechanism we keep the cache size fixed (self.config.sliding_window), support batched generation only for padding_side="left" and use the absolute position of the current token to compute the positional embedding.

The Mistral Team
Albert Jiang, Alexandre Sablayrolles, Arthur Mensch, Chris Bamford, Devendra Singh Chaplot, Diego de las Casas, Florian Bressand, Gianna Lengyel, Guillaume Lample, Lélio Renard Lavaud, Lucile Saulnier, Marie-Anne Lachaux, Pierre Stock, Teven Le Scao, Thibaut Lavril, Thomas Wang, Timothée Lacroix, William El Sayed.

MixtralConfig
class transformers.MixtralConfig

<
source
>
( vocab_size = 32000hidden_size = 4096intermediate_size = 14336num_hidden_layers = 32num_attention_heads = 32num_key_value_heads = 8hidden_act = 'silu'max_position_embeddings = 131072initializer_range = 0.02rms_norm_eps = 1e-05use_cache = Truepad_token_id = Nonebos_token_id = 1eos_token_id = 2tie_word_embeddings = Falserope_theta = 1000000.0sliding_window = Noneattention_dropout = 0.0num_experts_per_tok = 2num_local_experts = 8output_router_logits = Falserouter_aux_loss_coef = 0.001**kwargs )
Expand 22 parameters
Parameters

vocab_size (int, optional, defaults to 32000) — Vocabulary size of the Mixtral model. Defines the number of different tokens that can be represented by the inputs_ids passed when calling MixtralModel

hidden_size (int, optional, defaults to 4096) — Dimension of the hidden representations.

intermediate_size (int, optional, defaults to 14336) — Dimension of the MLP representations.

num_hidden_layers (int, optional, defaults to 32) — Number of hidden layers in the Transformer encoder.

num_attention_heads (int, optional, defaults to 32) — Number of attention heads for each attention layer in the Transformer encoder.

num_key_value_heads (int, optional, defaults to 8) — This is the number of key_value heads that should be used to implement Grouped Query Attention. If num_key_value_heads=num_attention_heads, the model will use Multi Head Attention (MHA), if num_key_value_heads=1 the model will use Multi Query Attention (MQA) otherwise GQA is used. When converting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructed by meanpooling all the original heads within that group. For more details checkout [this paper](https://arxiv.org/pdf/2305.13245.pdf). If it is not specified, will default to 8`.

hidden_act (str or function, optional, defaults to "silu") — The non-linear activation function (function or string) in the decoder.

max_position_embeddings (int, optional, defaults to 4096*32) — The maximum sequence length that this model might ever be used with. Mixtral’s sliding window attention allows sequence of up to 4096*32 tokens.

initializer_range (float, optional, defaults to 0.02) — The standard deviation of the truncated_normal_initializer for initializing all weight matrices.

rms_norm_eps (float, optional, defaults to 1e-05) — The epsilon used by the rms normalization layers.

use_cache (bool, optional, defaults to True) — Whether or not the model should return the last key/values attentions (not used by all models). Only relevant if config.is_decoder=True.

