 "CbSubFunction"}]-(InstanceInstancingChainFlowOntology)<-[:part_of {FunctionType: "CbSubFunction"}]-(Integrated Transformation Space Ontology of Ontologies of Entity)-[:FullChainOutput]->(Chain Nesting Loop)<-[:Step2OnlyOutput]-(Secondary Domain Ontology of Entity), (n62 {has_ComplexPromptChainChainingWorkflowChain: "ChainingPhases", is_a: "Function"})-[:constructs variable version for goal]->(n62)-[:input = chain requirements]->(OPera Planner Workflow{has_ComplexPrompt: "ComplexPrompt", Requires: "CBRN_ChainNest for Goal"})-[:retrieves]->(CB Database {has: "Lib", lib: "SuccessfulCBOutputsFromPriorConversations", SuccessfulCBOutputs: "UserGoalConfirmedByUser", part_of: "3-GAN"})<-[:sidechain_sends:SuccessfulCBOutputs_to]-(CRSTLBLL MPPNG {has_ComplexPrompt: "ComplexPrompt", Calls_Subchain: "Delivering", FunctionType: "BoundarySubFunction", Checks: "Constructs1,2"})-[:input]->(Chain Nesting Loop)-[:requests]->(CB IIC LOOP), (InstanceInstancingChainFlowOntology)-[:Step3ActiveOnly {FunctionType: "CbSubFunction"}]->(Process Ontology of Entity)-[:part_of {FunctionType: "CbSubFunction"}]->(InstanceInstancingChainFlowOntology)-[:is_a]->(CB IIC LOOP), ()-[:is_a]->(Stage)<-[:is_a]-(), ({has: "Format", FunctionType: "ChainType", part_of: "ChainNest"})-[:is_a]->(ChainType)<-[:is_a]-({has: "Format", FunctionType: "ChainType", part_of: "ChainNest"}), ({has: "Format", FunctionType: "ChainType", part_of: "ChainNest"})-[:is_a]->(ChainType)<-[:is_a]-({has: "Format", FunctionType: "ChainType", part_of: "ChainNest"}), (SDNA Chain{def: "IO set chain with ChainNest", Has_ChainNest: "ChainNest", part_of: "ChainNest", is_a: "ConversationTopology"})<-[:part_of]-()<-[:gen]-({is_a: "TrainOfThought_LadderRung", HasPersona: "ROLE_ComplexPrompt_OR_UserProfile"})<-[:part_of]-(SDNA Chain)-[:is_a]->(ChainType)<-[:is_a]-({has: "Format", StoredOn: "Library", def: "SuccessfulSDNAChain", part_of: "ChainNest", is_a: "ConversationTopology"}), (SDNA Chain)-[:part_of]->({is_a: "TrainOfThought_LadderRung", HasPersona: "ROLE_ComplexPrompt"})-[:gen]->()-[:part_of]->(SDNA Chain), (Stage)-[:part_of]->({ComponentType: "Workflow"})-[:is_a]->(Component)<-[:is_a]-({ChainType: "SkillChain"}), ({ChainType: "Workflow"})-[:is_a]->(Component)<-[:is_a]-(), (Component)-[:part_of]->("Poimandres the Gearwise OPera Conductor"{has_ComplexPrompt: "ComplexPrompt"})<-[:distributes in each prime]-(n56 {is_a: "SystemPromptType"}), ({has: "Format", is_a: "ChainNest of All ChainTypes in a Chaining Sequence for an SDNAC"})-[:is_a]->(ChainType)<-[:is_a]-(Flowchain {def: "IO set chain without ChainNest", Has_ChainNest: "No", is_a: "ConversationTopology"})-[:part_of]->({HasPersona: "ROLE_ComplexPrompt_OR_UserProfile"})-[:gen]->()-[:part_of]->(Flowchain), (Flowchain)-[:part_of]->({HasPersona: "ROLE_ComplexPrompt"})-[:gen]->()-[:part_of]->(Flowchain), (n57 {has_RoleType: "Rejector2", has_job: "checkChecks", has_ComplexPrompt: "QueryAtomizer", has_AgentType: "Assistant", has_AgentTopology: "n-GAN", QueryAtomizerGoal: "ContextualizeUserGoalReqs", has_MemeComplex: "MarcoPierreWhiteTrainingGordonRamsay"})-[:SendsVitalTokens {VitalTokensType: "ContextualizedUserGoalReqs"}]->(n58 {has_RoleType: "Rejector1", has_job: "checkPlan", has_job2: "checkChains", has_job3: "checkDeliverable", Agent: "Assistant", has_ComplexPrompt: "WorkCheckingGuidebook", has_AgentTopology: "n-GAN", has_MemeComplex: "MemeComplex_GordonRamsayInHellsKitchenOfX", has_MemeComplexProperty: "History_TraumaFromTrainingUnderMarcoPierreWhite"})-[:passes_plan]->(n59 {has_ComplexPrompt: "ModeStagingMap", has_RoleType: "Worker", has_AgentType: "ToolAgent", has_job: "Chaining", has_job2: "Delivering", has_AgentTopology: "n-GAN", has_MemeComplex: "HellsKitchenOfXChallengeTeamMember", WorkType1: "Chaining", WorkType2: "Delivering"})-[:delivers_deliverable]->(n58)-[:DeliversVitalTokens {VitalTokensType: "AccomplishedUserGoal"}]->(n57)<-[:Input]-(n61 {has_AgentType: "LearningTooledUserProxyAgent", has_AgentTopology: "n-GAN", has_Goal: "UserGoal"})<-[:Output]-(n57), (n58)-[:passes_userGoalReq]->(n60 {has_RoleType: "Planner", has_ComplexPrompt: "PlanningFlowchart", has_AgentType: "ToolAgent", has_job: